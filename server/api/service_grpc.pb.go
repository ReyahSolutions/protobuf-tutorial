// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConcatenationClient is the client API for Concatenation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConcatenationClient interface {
	// Concatenation request
	Concatenate(ctx context.Context, in *ConcatenationRequest, opts ...grpc.CallOption) (*ConcatenationResult, error)
}

type concatenationClient struct {
	cc grpc.ClientConnInterface
}

func NewConcatenationClient(cc grpc.ClientConnInterface) ConcatenationClient {
	return &concatenationClient{cc}
}

func (c *concatenationClient) Concatenate(ctx context.Context, in *ConcatenationRequest, opts ...grpc.CallOption) (*ConcatenationResult, error) {
	out := new(ConcatenationResult)
	err := c.cc.Invoke(ctx, "/proto.concatenation.Concatenation/Concatenate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConcatenationServer is the server API for Concatenation service.
// All implementations must embed UnimplementedConcatenationServer
// for forward compatibility
type ConcatenationServer interface {
	// Concatenation request
	Concatenate(context.Context, *ConcatenationRequest) (*ConcatenationResult, error)
	mustEmbedUnimplementedConcatenationServer()
}

// UnimplementedConcatenationServer must be embedded to have forward compatible implementations.
type UnimplementedConcatenationServer struct {
}

func (UnimplementedConcatenationServer) Concatenate(context.Context, *ConcatenationRequest) (*ConcatenationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Concatenate not implemented")
}
func (UnimplementedConcatenationServer) mustEmbedUnimplementedConcatenationServer() {}

// UnsafeConcatenationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConcatenationServer will
// result in compilation errors.
type UnsafeConcatenationServer interface {
	mustEmbedUnimplementedConcatenationServer()
}

func RegisterConcatenationServer(s grpc.ServiceRegistrar, srv ConcatenationServer) {
	s.RegisterService(&Concatenation_ServiceDesc, srv)
}

func _Concatenation_Concatenate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConcatenationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcatenationServer).Concatenate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.concatenation.Concatenation/Concatenate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcatenationServer).Concatenate(ctx, req.(*ConcatenationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Concatenation_ServiceDesc is the grpc.ServiceDesc for Concatenation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Concatenation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.concatenation.Concatenation",
	HandlerType: (*ConcatenationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Concatenate",
			Handler:    _Concatenation_Concatenate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "concatenation/service.proto",
}
